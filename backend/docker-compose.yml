version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      manager-agent:
        condition: service_started

  db:
    image: postgres:15
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    
  celery:
    build: .
    command: celery -A src.celery_app worker --loglevel=info
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - redis
      - app
  
  celery-beat:
    build: .
    command: celery -A src.celery_app beat --loglevel=info
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - redis
      - app

  # --- НОВЫЙ СЕРВИС ДЛЯ ЭКСПЕРТА ---
  expert-agent:
    build: .
    # Запускаем скрипт эксперта. --host 0.0.0.0 ОБЯЗАТЕЛЕН для доступа из других контейнеров.
    command: python -m src.agents.expert_agent --host 0.0.0.0 --port 10007
    volumes:
      - .:/app
    ports:
      # Пробрасываем порт на хост для отладки (опционально)
      - "10007:10007"
    environment:
      - PUBLIC_AGENT_URL=http://expert-agent:10007
    env_file:
      - .env
    # У этого сервиса нет зависимостей от других

  # --- НОВЫЙ СЕРВИС ДЛЯ МЕНЕДЖЕРА ---
  manager-agent:
    build: .
    # Запускаем скрипт менеджера
    command: python -m src.agents.manager_agent --host 0.0.0.0 --port 10008
    volumes:
      - .:/app
    ports:
      # Пробрасываем порт на хост для отладки (опционально)
      - "10008:10008"
    env_file:
      - .env
    environment:
      - PUBLIC_AGENT_URL=http://manager-agent:10008 
      - EXPERT_AGENT_URL=http://expert-agent:10007 
    depends_on:
      # Менеджер зависит от эксперта, так как обращается к нему
      - expert-agent

volumes:
  postgres_data:
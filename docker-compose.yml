version: '3.8'

services:
  # --- NGINX REVERSE PROXY ---
  # Единая точка входа для всех запросов
  nginx:
    image: nginx:1.25-alpine
    ports:
      # Теперь порт 8080 на вашем компьютере (хосте)
      # будет перенаправлен на порт 80 внутри контейнера Nginx.
      - "8080:80" 
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - frontend
      - frontend_chat
      - backend

  # --- FRONTEND SERVICES ---
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    # Порты больше не нужны, т.к. трафик идет через главный Nginx
    # Volumes для кода тоже не нужны, т.к. все копируется в образ на этапе сборки

  frontend_chat:
    build:
      context: ./frontend_chat
      dockerfile: Dockerfile
    # Аналогично, порты и volumes не нужны

  # --- BACKEND SERVICES ---
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      # Этот порт можно убрать, если к API обращается только Nginx.
      # Оставим для удобства прямой отладки API через localhost:8001
      - "8001:8001"
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      manager-agent:
        condition: service_started

  celery_worker:
    build:
      context: ./backend
    command: celery -A src.celery_app worker --loglevel=info
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
    depends_on:
      - redis
      - backend

  celery_beat:
    build:
      context: ./backend
    command: celery -A src.celery_app beat --loglevel=info
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
    depends_on:
      - redis
      - backend

  # ... (остальные сервисы: expert-agent, manager-agent, db, redis) ...
  # Они остаются без изменений из предыдущего ответа
  expert-agent:
    build:
      context: ./backend
    command: python -m src.agents.expert_agent --host 0.0.0.0 --port 10007
    volumes:
      - ./backend:/app
    ports:
      - "10007:10007"
    env_file:
      - ./backend/.env
    environment:
      - PUBLIC_AGENT_URL=http://expert-agent:10007

  manager-agent:
    build:
      context: ./backend
    command: python -m src.agents.manager_agent --host 0.0.0.0 --port 10008
    volumes:
      - ./backend:/app
    ports:
      - "10008:10008"
    env_file:
      - ./backend/.env
    environment:
      - PUBLIC_AGENT_URL=http://manager-agent:10008
      - EXPERT_AGENT_URL=http://expert-agent:10007
    depends_on:
      - expert-agent

  db:
    image: postgres:15
    env_file:
      - ./backend/.env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    ports:
      - "6379:6379"

volumes:
  postgres_data: